#!/bin/bash
# mkcert         - create new certiicates and keys (uses openssl)

# IMPORTANT: TO UPDATE A CERTIFICATE YOU MUST REVOKE, THEN UPDATEDB BEFORE
# YOU ATTEMPT TO RECREATE

# openssl req - PKCS#10 certificate request and certificate generating utility.
#               @see http://www.openssl.org/docs/apps/req.html#COMMAND_OPTIONS
#
# Some common options are:
# -new    this option generates a new certificate request. It will prompt the user
# for the relevant field values. The actual fields prompted for and their maximum 
# and minimum sizes are specified in the configuration file and any requested extensions.
# If the -key option is not used it will generate a new RSA private key using information 
# specified in the configuration file.
#
# -newkey arg
#    this option creates a new certificate request and a new private key. The 
#    argument takes one of several forms. rsa:nbits, where nbits is the number of bits, 
#    generates an RSA key nbits in size. dsa:filename generates a DSA key using the 
#    parameters in the file filename. param:file generates a key using the parameter file 
#    file, the algorithm is determined by the parameters. algname:file use algorithm algname 
#    and parameter file file the two algorithms must match or an error occurs. algname 
#    just uses algorithm algname.
#
# -pkeyopt opt:value
#    set the public key algorithm option opt to value. The precise set of options 
#    supported depends on the public key algorithm used and its implementation. See 
#    KEY GENERATION OPTIONS in the genpkey manual page for more details.
#
# -key filename
#    This specifies the file to read the private key from. It also accepts PKCS#8 
#    format private keys for PEM format files.
#
# -keyform PEM|DER
#    the format of the private key file specified in the -key argument. PEM is the default.
#
# -keyout filename
#    this gives the filename to write the newly created private key to. If this option 
#    is not specified then the filename present in the configuration file is used.
#
# PASS PHRASE ARGUMENTS
#
# Several commands accept password arguments, typically using -passin and -passout for 
# input and output passwords respectively. These allow the password to be obtained from 
# a variety of sources. Both of these options take a single argument whose format is 
# described below. If no password argument is given and a password is required then the 
# user is prompted to enter one: this will typically be read from the current terminal 
# with loging turned off.
# 
# pass:password
#    the actual password is password. Since the password is visible to utilities (like
#    'ps' under Unix) this form should only be used where security is not important.
#
# env:var
#    obtain the password from the environment variable var. Since the environment of 
#    other processes is visible on certain platforms (e.g. ps under certain Unix OSes) 
#    this option should be used with caution.
#
# file:pathname
#    the first line of pathname is the password. If the same pathname argument is supplied 
#    to -passin and -passout arguments then the first line will be used for the input 
#    password and the next line for the output password. pathname need not refer to a 
#    regular file: it could for example refer to a device or named pipe.
#
# fd:number
#    read the password from the file descriptor number. This can be used to send the 
#    data via a pipe for example.
#
# stdin
#    read the password from standard input.
#
# FIXME: we have several ways of creating the key pair, certificate signing request
#        and (it appears) several ways of signing (by the CA - openssl ca, and self 
#        signing - openssl X509 -signkey ${RSA}).
#        Why would we want self signing?
# 
# Examples:
#   mkcert -C -n "MyOrg" -p mypass  # create a CA
#
# To create server or client certs you must first:
#   - export CA_NAME="MyOrg" (or whatever your CA's common name is )
#   - create the ca in [targetdir]/ca/...
# then you can create certificates:
#   mkcert -sa -n "test1.myorg.com" -p mypass  # create a wildcard server cert, signed by the CA
#   mkcert -sS -n "test1.myorg.com" -p test # create a selfsigned server cert

#CN=cName, OU=orgUnit, O=org, L=city, S=state, C=countryCode
# formatted like this for openssl: '/C=US/ST=Oregon/L=Portland/CN=www.madboa.com'
function _create_openssl_cnf(){
TARGET_CA_BASE="${2}" 
CA_PRIVATE_KEY="${3}" 
CA_CERTIFICATE="${4}"

echo "writing openssl config to ${1}"
cat > "${1}" <<EOF
#
# OpenSSL example configuration file.
# This is mostly being used for generation of certificate requests.
#

# This definition stops the following lines choking if HOME isn't
# defined.
HOME			= .
RANDFILE		= \$ENV::HOME/.rnd

# Extra OBJECT IDENTIFIER info:
#oid_file		= \$ENV::HOME/.oid
oid_section		= new_oids

# To use this configuration file with the "-extfile" option of the
# "openssl x509" utility, name here the section containing the
# X.509v3 extensions to use:
# extensions		= 
# (Alternatively, use a configuration file that has only
# X.509v3 extensions in its main [= default] section.)

[ new_oids ]

# We can add new OIDs in here for use by 'ca' and 'req'.
# Add a simple OID like this:
# testoid1=1.2.3.4
# Or use config file substitution like this:
# testoid2=\${testoid1}.5.6

####################################################################
[ ca ]
default_ca	= CA_default		# The default ca section

####################################################################
[ CA_default ]

dir		= $TARGET_CA_BASE		# Where everything is kept
certs		= \$dir/certs		# Where the issued certs are kept
crl_dir		= \$dir/crl		# Where the issued crl are kept
database	= \$dir/index.txt	# database index file.
#unique_subject	= no			# Set to 'no' to allow creation of
					# several ctificates with same subject.
new_certs_dir	= \$dir/newcerts		# default place for new certs.

certificate	= $CA_CERTIFICATE 	# The CA certificate
serial		= \$dir/serial 		# The current serial number
#crlnumber	= \$dir/crlnumber	# the current crl number must be
					# commented out to leave a V1 CRL
crl		= \$dir/crl.pem 		# The current CRL
private_key	= $CA_PRIVATE_KEY        # The private key
RANDFILE	= \$dir/private/.rand	# private random number file

x509_extensions	= usr_cert		# The extentions to add to the cert

# Comment out the following two lines for the "traditional"
# (and highly broken) format.
name_opt 	= ca_default		# Subject Name options
cert_opt 	= ca_default		# Certificate field options

# Extension copying option: use with caution.
# copy_extensions = copy

# Extensions to add to a CRL. Note: Netscape communicator chokes on V2 CRLs
# so this is commented out by default to leave a V1 CRL.
# crlnumber must also be commented out to leave a V1 CRL.
# crl_extensions	= crl_ext

default_days	= 3650			# how long to certify for
default_crl_days= 30			# how long before next CRL
default_md	= md5			# which md to use.
preserve	= no			# keep passed DN ordering

# A few difference way of specifying how similar the request should look
# For type CA, the listed attributes must be the same, and the optional
# and supplied fields are just that :-)
policy		= policy_match

# For the CA policy
[ policy_match ]
countryName		= match
stateOrProvinceName	= match
organizationName	= match
organizationalUnitName	= optional
commonName		= supplied
emailAddress		= optional

# For the 'anything' policy
# At this point in time, you must list all acceptable 'object'
# types.
[ policy_anything ]
countryName		= optional
stateOrProvinceName	= optional
localityName		= optional
organizationName	= optional
organizationalUnitName	= optional
commonName		= supplied
emailAddress		= optional

####################################################################
[ req ]
default_bits		= 1024
default_keyfile 	= privkey.pem
distinguished_name	= req_distinguished_name
attributes		= req_attributes
x509_extensions	= v3_ca	# The extentions to add to the self signed cert

# Passwords for private keys if not present they will be prompted for
# input_password = secret
# output_password = secret

# This sets a mask for permitted string types. There are several options. 
# default: PrintableString, T61String, BMPString.
# pkix	 : PrintableString, BMPString.
# utf8only: only UTF8Strings.
# nombstr : PrintableString, T61String (no BMPStrings or UTF8Strings).
# MASK:XXXX a literal mask value.
# WARNING: current versions of Netscape crash on BMPStrings or UTF8Strings
# so use this option with caution!
string_mask = nombstr

# req_extensions = v3_req # The extensions to add to a certificate request

[ req_distinguished_name ]
countryName			= Country Name (2 letter code)
countryName_default		= AU
countryName_min			= 2
countryName_max			= 2

stateOrProvinceName		= State or Province Name (full name)
stateOrProvinceName_default	= Some-State

localityName			= Locality Name (eg, city)

0.organizationName		= Organization Name (eg, company)
0.organizationName_default	= Internet Widgits Pty Ltd

# we can do this but it is not needed normally :-)
#1.organizationName		= Second Organization Name (eg, company)
#1.organizationName_default	= World Wide Web Pty Ltd

organizationalUnitName		= Organizational Unit Name (eg, section)
#organizationalUnitName_default	=

commonName			= Common Name (eg, YOUR name)
commonName_max			= 64

emailAddress			= Email Address
emailAddress_max		= 64

# SET-ex3			= SET extension number 3

[ req_attributes ]
challengePassword		= A challenge password
challengePassword_min		= 4
challengePassword_max		= 20

unstructuredName		= An optional company name

[ usr_cert ]

# These extensions are added when 'ca' signs a request.

# This goes against PKIX guidelines but some CAs do it and some software
# requires this to avoid interpreting an end user certificate as a CA.

basicConstraints=CA:FALSE

# Here are some examples of the usage of nsCertType. If it is omitted
# the certificate can be used for anything *except* object signing.

# This is OK for an SSL server.
# nsCertType			= server

# For an object signing certificate this would be used.
# nsCertType = objsign

# For normal client use this is typical
# nsCertType = client, email

# and for everything including object signing:
# nsCertType = client, email, objsign

# This is typical in keyUsage for a client certificate.
# keyUsage = nonRepudiation, digitalSignature, keyEncipherment

# This will be displayed in Netscape's comment listbox.
nsComment			= "OpenSSL Generated Certificate"

# PKIX recommendations harmless if included in all certificates.
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid,issuer:always

# This stuff is for subjectAltName and issuerAltname.
# Import the email address.
# subjectAltName=email:copy
# An alternative to produce certificates that aren't
# deprecated according to PKIX.
# subjectAltName=email:move

# Copy subject details
# issuerAltName=issuer:copy

#nsCaRevocationUrl		= http://www.domain.dom/ca-crl.pem
#nsBaseUrl
#nsRevocationUrl
#nsRenewalUrl
#nsCaPolicyUrl
#nsSslServerName

[ v3_req ]

# Extensions to add to a certificate request

basicConstraints = CA:FALSE
keyUsage = nonRepudiation, digitalSignature, keyEncipherment

[ v3_ca ]


# Extensions for a typical CA


# PKIX recommendation.

subjectKeyIdentifier=hash

authorityKeyIdentifier=keyid:always,issuer:always

# This is what PKIX recommends but some broken software chokes on critical
# extensions.
#basicConstraints = critical,CA:true
# So we do this instead.
basicConstraints = CA:true

# Key usage: this is typical for a CA certificate. However since it will
# prevent it being used as an test self-signed certificate it is best
# left out by default.
# keyUsage = cRLSign, keyCertSign

# Some might want this also
# nsCertType = sslCA, emailCA

# Include email address in subject alt name: another PKIX recommendation
# subjectAltName=email:copy
# Copy issuer details
# issuerAltName=issuer:copy

# DER hex encoding of an extension: beware experts only!
# obj=DER:02:03
# Where 'obj' is a standard or added object
# You can even override a supported extension:
# basicConstraints= critical, DER:30:03:01:01:FF

[ crl_ext ]

# CRL extensions.
# Only issuerAltName and authorityKeyIdentifier make any sense in a CRL.

# issuerAltName=issuer:copy
authorityKeyIdentifier=keyid:always,issuer:always

[ proxy_cert_ext ]
# These extensions should be added when creating a proxy certificate

# This goes against PKIX guidelines but some CAs do it and some software
# requires this to avoid interpreting an end user certificate as a CA.

basicConstraints=CA:FALSE

# Here are some examples of the usage of nsCertType. If it is omitted
# the certificate can be used for anything *except* object signing.

# This is OK for an SSL server.
# nsCertType			= server

# For an object signing certificate this would be used.
# nsCertType = objsign

# For normal client use this is typical
# nsCertType = client, email

# and for everything including object signing:
# nsCertType = client, email, objsign

# This is typical in keyUsage for a client certificate.
# keyUsage = nonRepudiation, digitalSignature, keyEncipherment

# This will be displayed in Netscape's comment listbox.
nsComment			= "OpenSSL Generated Certificate"

# PKIX recommendations harmless if included in all certificates.
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid,issuer:always

# This stuff is for subjectAltName and issuerAltname.
# Import the email address.
# subjectAltName=email:copy
# An alternative to produce certificates that aren't
# deprecated according to PKIX.
# subjectAltName=email:move

# Copy subject details
# issuerAltName=issuer:copy

#nsCaRevocationUrl		= http://www.domain.dom/ca-crl.pem
#nsBaseUrl
#nsRevocationUrl
#nsRenewalUrl
#nsCaPolicyUrl
#nsSslServerName

# This really needs to be in place for it to be a proxy certificate.
proxyCertInfo=critical,language:id-ppl-anyLanguage,pathlen:3,policy:foo

EOF

}

function _mkcert(){

local X509_STRING="NOTSPECIFIED"
local COMMON_NAME="NOTSPECIFIED"
local LONG_NAME="NOTSPECIFIED"
# server or client
local TYPE="client"
local SIGN_TYPE="ca"
local TARGET_DIR=`pwd`/certificates
local TARGET_CA_BASE="${TARGET_DIR}/ca"
local DAYS=3650
local ALL_SUBDOMAINS=off
local OPENSSL_CONFIG="/Volumes/Development/checkouts/sysadmin/conf/openssl.cnf"
local PASSWORD="NOTSPECIFIED"
local BE_VERBOSE
local CA_CMD
local REFORMAT_CMD
local WC_REQ_CMD
local SIGN_CMD
local EXTRACT_CMD
local CLIENT_NICE_NAME
local HERE

# MUST RESET OPTIND
OPTIND=1
local FIRST_ARG
local FIRST_ARG_IDX
local LAST_OPTION
local LAST_OPTION_IDX

while getopts "vCcsSad:n:p:x:t:l:o" flag
do
    case "$flag" in
      v)  BE_VERBOSE=on;;
      C)  TYPE="ca";;
      c)  TYPE="client";;
      s)  TYPE="server";;
      S)  SIGN_TYPE="self";;
      d)  DAYS="${OPTARG}";;
      n)  COMMON_NAME="${OPTARG}";;
      p)  PASSWORD="${OPTARG}";;
      o)  OPENSSL_CONFIG="${OPTARG}";;
      a)  ALL_SUBDOMAINS=on;;
      x)  X509_STRING="${OPTARG}";;
      t)  TARGET_DIR="${OPTARG}";;
      l)  LONG_NAME="${OPTARG}";;
      \?) echo "usage: mkcert -n blah.mydomain.com -p mypass"
          echo ""
          echo "       the common name should not contain any spaces"
	  echo " "
	  echo " Examples:"
	  echo "   mkcert -C -n \"MyCA\" -p mkcert 'mypass'  # create a CA"
	  echo ""
	  echo " To create server or client certs you must first:"
	  echo "   - create the ca in [targetdir]/ca/..."
	  echo "   - export CA_NAME=\"MyCA\" (or whatever your CA's common name is )"
	  echo " then you can create certificates:"
	  echo "   mkcert -sa -n \"blah.mydomain.com\" -p mypass  # create a wildcard server cert, signed by the CA"
	  echo "   mkcert -sS -n \"blah.mydomain.com\" -p test # create a selfsigned server cert"
	  echo ""
          return 1;;
    esac
done

if [ ${PASSWORD} == "NOTSPECIFIED" ]
then
  echo "We need to specify several passwords"
  echo "Please enter the password you wish to use:"
  read -e PASSWORD
fi
if [ ${X509_STRING} != "NOTSPECIFIED" ]
then
    DISTINGUISHED_NAME="${X509_STRING}"
elif [ "${COMMON_NAME}" != "NOTSPECIFIED" ]
then
    if [ ${ALL_SUBDOMAINS} == "on" ]
	then
	#DISTINGUISHED_NAME="/C=US/ST=California/L=San Francisco/CN=*.${COMMON_NAME}"
	DISTINGUISHED_NAME="/C=US/ST=California/L=San Francisco/CN=*"
    else
	if [ ${LONG_NAME} == "NOTSPECIFIED" ] 
	    then
	    DISTINGUISHED_NAME="/C=US/ST=California/L=San Francisco/O=UCSF SAA/OU=SIS/CN=${COMMON_NAME}"
	else
	    DISTINGUISHED_NAME="/C=US/ST=California/L=San Francisco/O=UCSF SAA/OU=SIS/CN=${LONG_NAME}"
	fi
    fi
else
    COMMON_NAME="${USER}@${HOSTNAME}"
fi


#if [ ! -e ${OPENSSL_CONFIG} ]
#then
#   echo "OpenSSL conig file [${OPENSSL_CONFIG}] does not exist. Use -o [path/to/openssl.cnf]."
#   return 1
#fi


if [ -e ${TARGET_DIR} ]
then
    if ask -n "Directory [${TARGET_DIR}] exits, delete it?"
	then
	rm -rf ${TARGET_DIR}
    fi
fi

#mkdirWithRetry ${TARGET_DIR}/private
mkdir -p ${TARGET_DIR}/{certs/private,crl,newcerts/private,ca,ca/private,ca/newcerts}

echo "Using distingushed name [${DISTINGUISHED_NAME}]"

# SET YOUR CA NAME WITH AN ENVIRONMENT PROPERTY 
local CA_CERT="${TARGET_CA_BASE}/${CA_NAME}-crt.pem"
local CAPK="${TARGET_CA_BASE}/private/${CA_NAME}-key.pem"
## we reformat the ${CA_CERT} with pem2crtForBSD
local CA="${TARGET_CA_BASE}/${CA_NAME}-ca.crt"
local CASR="${TARGET_CA_BASE}/serial" #${CA_NAME}-ca.srl"

# USE TRIPLE DES FOR SERVER KEYS
local DES="-des3 "
local RSA="${TARGET_DIR}/newcerts/private/${COMMON_NAME}.key"
local CSR="${TARGET_DIR}/newcerts/private/${COMMON_NAME}.csr"
local CRT="${TARGET_DIR}/newcerts/${COMMON_NAME}.crt"
local PEM="${TARGET_DIR}/newcerts/${COMMON_NAME}.pem"
local P12="${TARGET_DIR}/newcerts/${COMMON_NAME}.p12"

if [ ${TYPE} == "server" ];
then
	echo "About to generate a SERVER certificate"
elif [ ${TYPE} == "client" ]
then
    echo "About to generate a CLIENT certificate"
    CLIENT_NICE_NAME="Client: ${COMMON_NAME}"
    # FIXME: ask for 'nice name'

elif [ ${TYPE} == "ca" ]
then

    if [ ! -f "${OPENSSL_CONFIG}" ]
    then
	echo "File [${OPENSSL_CONFIG}] does not exist.";
        _create_openssl_cnf "${TARGET_CA_BASE}/openssl.cnf" "${TARGET_CA_BASE}" "${CA_PRIVATE_KEY}" "${CA_CERTIFICATE}"

    fi

    # Taken from: http://www.heebs.ch/computer/notes/wildcardcert/#how
    echo "About to create a CA for distingushed name ${DISTINGUISHED_NAME}"

    echo 01 > "${CASR}"
    touch ${TARGET_CA_BASE}/index.txt

    # CREATE CERTIFICATE AUTHORITY
    #    - set the password for the CA's private key (${CAPK})   
    #    - at the end, we will have three files, ${CAPK}, ${CA_CERT} and ${CA}. 
    CA_CMD="openssl req -passout pass:'${PASSWORD}' -new -x509 -subj '${DISTINGUISHED_NAME}' -keyout ${CAPK} -out ${CA_CERT} -days ${DAYS}"
    # echo ${CA_CMD}
    eval ${CA_CMD}

    if [ $? -ne 0 ]
	then
	echo "Unable to generate CA [$?]"
	return $?
    else
	echo "Created CA."
    fi

    # REFORMAT THE PEM INTO A crt (using the BSD/Mac OSX version)
    REFORMAT_CMD="pem2crtForBSD '${CA_CERT}' > '${CA}'"
    eval ${REFORMAT_CMD}
    if [ $? -ne 0 ]
	then
	echo "Unable to reformat CA PEM [$?]"
	return $?
    else
	echo "Reformated PEM into .crt."
    fi

    return 0;
else
   echo "Invalid certificate type. Use -c for client, -s for server, -C for CA."
   echo "Usage: mkcert [-csd] [-n common_name] [-x 'CN=cName, OU=orgUnit, O=org, L=city, S=state, C=countryCode'] "

fi

check_file "${CA_CERT}"
check_file "${CAPK}"
check_file "${CA}"
check_file "${CASR}"

    # 1. From here on, this is an alternative way of creating a  your key pair
    #    and signing request (the other being the code below this segment, 
    #    beginning 'openssl genrsa')
    # The former is the private key used to sign other certificate requests (this
    # is where the pass phrase comes in). The latter is the public key, i.e. the 
    # part of the CA we distribute to our friends and have them install in their
    # browsers or mail readers if they so desire.
    # Now let's continue with the creation of the actual PKCS#10 certificate request,
    # which is just another asymetric key-pair (just like the CA's), except this time
    # the Common Name has a wild card. 
    #    - set the password for the certificate request (${CSR}) to be the 
    #      same as the CA's private key (above)
    WC_REQ_CMD="openssl req -passout pass:'${PASSWORD}' -new -subj '${DISTINGUISHED_NAME}' -keyout ${CSR} -out ${CSR} -days ${DAYS}"
    eval ${WC_REQ_CMD}
    if [ $? -ne 0 ]
	then
	echo "Unable to create wildcard PKCS#10 certificate request[$?]"
	return $?
    else
	echo "Created wildcard PKCS#10 certificate request."
    fi

    # 2. Now we have a file ${CSR} containing both the private and the public 
    # key for our certificate request, i.e., a key not yet signed by a certificate authority. 
    # So the next step is to sign the request by our CA created above, and to do this
    # we have to passin the CA's private key password.
    SIGN_CMD="openssl ca -passin pass:'${PASSWORD}' -keyfile ${CAPK} -cert ${CA_CERT} -policy policy_anything -out ${CRT}  -config ${TARGET_CA_BASE}/openssl.cnf -infiles ${CSR}"
    echo "${SIGN_CMD}"
    eval ${SIGN_CMD}
    if [ $? -ne 0 ]
	then
	echo "Unable to sign the PKCS#10 certificate request with the CA's private key [$?]"
	return $?
    else
	echo "Signed the PKCS#10 certificate request with the CA's private key."
    fi

    # 3. In most cases we need to make the private key without a pass phrase available 
    # to a service like a web or imap server so they can start automatically without 
    # user intervention. So let's extract the private key without the pass phrase.
    EXTRACT_CMD="openssl rsa -passin pass:'${PASSWORD}' < ${CSR} > ${RSA}"
    eval ${EXTRACT_CMD}

    if [ $? -ne 0 ]
	then
	echo "Unable to extract the private key from PKCS#10 certificate request. [$?]"
	return $?
    else
	echo "Extracted the private key from PKCS#10 certificate request."
    fi

# ===============================================================================
# THIS IS AN ALTERNATIVE METHOD FOR CREATING THE KEY PAIRS AND CSR
# ===============================================================================
# CREATE THE RSA KEY
#openssl genrsa ${DES} -out ${RSA} 1024
#if [ $? -ne 0 ]
#then
#echo "Unable to generate RSA private key [$?]"
#return $?
#fi

# CREATE THE SIGNING PKCS#10 CERTIFICATE REQUEST
#SCMD="openssl req -subj '${DISTINGUISHED_NAME}' -new -key ${RSA} -out ${CSR}"
#echo ${SCMD}
#eval ${SCMD}

#if [ $? -ne 0 ]
#then
#echo "Unable to generate signing PKCS#10 certificate request [$?]"
#return $?
#fi
# ===============================================================================

    
SIGN_CMD="openssl x509 -subj '${DISTINGUISHED_NAME}' -req -days ${DAYS} -in ${CSR} -out ${CRT} -CAserial ${CASR}"

# if self sign
if [ ${SIGN_TYPE} == "self" ];
then
    SIGN_CMD="${SIGN_CMD} -signkey ${RSA}"
else
    SIGN_CMD="${SIGN_CMD} -CA ${CA} -CAkey ${CAPK} "
fi

if [ ${TYPE} == "server" ];
then
    SIGN_CMD="${SIGN_CMD} -addtrust serverAuth " 
else
    SIGN_CMD="${SIGN_CMD} -addtrust clientAuth " 
fi

eval ${SCMD}

if [ $? -ne 0 ]
then
    echo "Unable to generate ${type} certificate for ${COMMON_NAME} [$?]"
    return $?
fi

# VERIFY THE CERT
openssl x509 -text -noout -in ${CRT}


if [ $? -ne 0 ]
    then
    echo "Unable to verify the ${TYPE} certificate for ${DISTINGUISHED_NAME} [$?]"
    return $?
fi


if [ ${TYPE} != "server" ];
then
   # FORMAT AS PEM (CLIENT CERTS ONLY)
    openssl x509 -in ${CRT} -out ${PEM} -outform PEM

   # WRAP CERT IN pkcs12
    openssl pkcs12 -export -in ${PEM} -inkey ${RSA} -out ${P12} -name "${CLIENT_NICE_NAME}"

fi


# who issued the cert?
#openssl x509 -noout -in cert.pem -issuer

# to whom was it issued?
#openssl x509 -noout -in cert.pem -subject

# for what dates is it valid?
#openssl x509 -noout -in cert.pem -dates

# the above, all at once
#openssl x509 -noout -in cert.pem -issuer -subject -dates

# what is its hash value?
#openssl x509 -noout -in cert.pem -hash

# what is its MD5 fingerprint?
#openssl x509 -noout -in cert.pem -fingerprint

}

_mkcert $*
